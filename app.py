import streamlit as st
import random
from datetime import datetime

st.set_page_config(page_title="QCM Micro√©conomie", page_icon="üß†", layout="centered")

# ------------- QUIZ DATA ------------- #
QUESTIONS = [
    {
        "q": (
            "Roger h√©site entre prendre des cours de tennis ou des cours de football.\n"
            "Il sait que le tennis lui permettra de gagner 10'000 pour un co√ªt de 7'000, "
            "tandis que le football lui permettra de gagner 12'000 pour un co√ªt de 800.\n"
            "Pour Roger, quel est le co√ªt d'opportunit√© des cours de tennis ?"
        ),
        "choices": ["11'200", "10'200", "8'200", "3'000"],
        "answer": 0,
        "explain": "Le co√ªt d‚Äôopportunit√© est la meilleure alternative sacrifi√©e : ici, le b√©n√©fice net du football (12'000 - 800) = 11'200."
    },
    {
        "q": (
            "Roger h√©site entre prendre des cours de tennis ou des cours de football.\n"
            "Il sait que le tennis lui permettra de gagner 10'000 pour un co√ªt de 7'000, "
            "tandis que le football lui permettra de gagner 12'000 pour un co√ªt de 800.\n"
            "Pour Roger, quel est le co√ªt d'opportunit√© des cours de football ?"
        ),
        "choices": ["11'200", "10'200", "8'200", "3'000"],
        "answer": 3,
        "explain": "Co√ªt d'opportunit√© = meilleure alternative sacrifi√©e : ici, le b√©n√©fice net du tennis (10'000 - 7'000) = 3'000."
    },
    {
        "q": (
            "La fonction de demande s'√©crit :\n"
            "Q^D = 17 - P\n"
            "√Ä quel prix maximal les consommateurs seraient-ils dispos√©s √† acheter 3 unit√©s ?"
        ),
        "choices": ["18", "16", "14", "12"],
        "answer": 2,
        "explain": "Inverse de la demande : P = 17 - Q. Pour Q = 3, P = 14."
    },
    {
        "q": (
            "La fonction de demande s'√©crit :\n"
            "Q^D = 17 - P\n"
            "Si le prix est 3, quelle sera l'√©lasticit√© prix de la demande ?\n"
            "(arrondissez le r√©sultat au dixi√®me)"
        ),
        "choices": ["-4.7", "-3", "-0.2", "-0.1"],
        "answer": 2,
        "explain": "dQ/dP = -1 et Q=14 (car 17-3). √âlasticit√©: Œµ = (dQ/dP)*(P/Q) = -1*(3/14) ‚âà -0,214 ‚Üí -0,2 au dixi√®me."
    },
    {
        "q": (
            "La fonction de demande s'√©crit :\n"
            "Q^D = 17 - P\n"
            "Pour quel prix l'√©lasticit√© prix de cette demande est-elle unitaire ?\n"
            "(arrondissez le r√©sultat au dixi√®me)"
        ),
        "choices": ["17", "8.5", "3.4", "1"],
        "answer": 1,
        "explain": "Œµ_demande = (dQ^d/dP)¬∑(P/Q^d) sachant (dQ^d/dP) = -1 alors Œµ_demande = -1 √ó (P/Q^d) = -(P/(17 - P))\n"
                    "Condition d‚Äô√©lasticit√© unitaire ‚áí |Œµ_demamde| = |-(P/(17 - P))| = |1| donc P/(17 - P) = 1 ‚áí P = 17 ‚àí P ‚áí 2P = 17 ‚áí P=8,5."
    },
    {
        "q": (
            "La fonction d'offre s'√©crit :\n"
            "Q^O = -63 + 9P\n"
            "Si le prix est 18, quelle sera la quantit√© offerte ?"
        ),
        "choices": ["117", "99", "81", "18"],
        "answer": 1,
        "explain": "Q = -63 + 9P ‚áí pour P = 18 : Q = -63 + 9√ó18 = -63 + 162 = 99."
    },
    {
        "q": (
            "La fonction d'offre s'√©crit :\n"
            "Q^O = -63 + 9P\n"
            "√Ä quel prix minimal les producteurs seraient-ils dispos√©s √† vendre 25 unit√©s ?\n"
            "(arrondissez le r√©sultat au dixi√®me)"
        ),
        "choices": ["10.5", "9.8", "8.2", "7"],
        "answer": 1,
        "explain": "Inverse de l'offre : P = (Q + 63)/9. Pour Q = 25, P = (25 + 63)/9 = 88/9 ‚âà 9,8."
    },
    {
        "q": (
            "La fonction d'offre s'√©crit :\n"
            "Q^O = -63 + 9P\n"
            "Si le prix est 18, quelle sera l'√©lasticit√© prix de l'offre ?\n"
            "(arrondissez le r√©sultat au dixi√®me)"
        ),
        "choices": ["2", "1.8", "1.6", "1"],
        "answer": 2,
        "explain": "Œµ_offre = (dQ^o/dP)¬∑(P/Q) sachant (dQ^o/dP) = 9 alors Q^o = -63 + 9 √ó 18 = 99 ; donc Œµ_offre = 9 √ó (18/99) = 162/99 ‚âà 1,64 ‚Üí 1,6."
    },
    {
        "q": ("Laquelle des propositions suivantes rel√®ve du champ d‚Äô√©tude de la micro√©conomie ?"),
        "choices": [
            "Le taux de ch√¥mage est plus √©lev√© √† Gen√®ve qu‚Äô√† Zurich",
            "L‚ÄôIPC a augment√© en Suisse de 1 % entre 2023 et 2024",
            "La BNS d√©cide de baisser son taux directeur",
            "Migros fait une action sur le prix des mandarines"],
        "answer": 3,
        "explain": "La micro√©conomie √©tudie les d√©cisions des m√©nages/entreprises et le fonctionnement d‚Äôun march√© particulier. Une action de Migros sur le prix d‚Äôun produit concerne un march√© sp√©cifique. Les autres propositions rel√®vent de la macro√©conomie (agr√©gats/ politiques)."
    },
    {
        "q": ("Laquelle des affirmations suivantes est positive (par opposition √† normative) ?"),
        "choices": [
            "Les entreprises doivent prendre des mesures pour augmenter le nombre de femmes dans les conseils d‚Äôadministration.",
            "Il faudrait que le Portugal r√©duise sa dette publique pendant la p√©riode de croissance √©conomique actuelle.",
            "Si l‚Äô√âtat de Gen√®ve d√©cidait d‚Äôintroduire une taxe au sac, le tri des d√©chets augmenterait.",
            "La Conf√©d√©ration devrait augmenter et g√©n√©raliser la taxe carbone afin de r√©duire les √©missions de CO‚ÇÇ."],
        "answer": 2,
        "explain": "Une affirmation positive est v√©rifiable/causale (¬´ augmenterait ¬ª). Les autres sont normatives (jugements de valeur : ¬´ doivent ¬ª, ¬´ il faudrait ¬ª, ¬´ devrait ¬ª)."
    },
    {
        "q": ("Laquelle des propositions suivantes concernant l‚Äôorganisation de la vie √©conomique est correcte ?"),
        "choices": [
            "Le souci principal du syst√®me de march√© pur consiste en l‚Äôabsence d‚Äôincitations, ce qui entra√Æne peu d‚Äôinnovation et donc une croissance √©conomique faible.",
            "Dans une √©conomie planifi√©e, les agents √©conomiques disposent d‚Äôune large libert√© pour d√©cider ce qu‚Äôils souhaitent produire et consommer.",
            "Dans une √©conomie mixte, l‚Äô√âtat ne peut pas intervenir sur les march√©s.",
            "Dans une √©conomie mixte, l‚Äô√âtat intervient pour encadrer l‚Äôactivit√© √©conomique afin de limiter les probl√®mes potentiels du syst√®me de march√© ou de l‚Äô√©conomie planifi√©e."],
        "answer": 3,
        "explain": "√âconomie de march√© : d√©cisions surtout laiss√©es aux prix et aux agents priv√©s. √âconomie planifi√©e : d√©cisions centralis√©es par l‚Äô√âtat. √âconomie mixte : combinaison des deux, avec intervention publique pour corriger des d√©faillances."
    },
    {
        "q": ("Laquelle des affirmations suivantes concernant les mod√®les √©conomiques est fausse ?"),
        "choices": [
            "Un mod√®le √©conomique permet d‚Äô√©tablir des lois s‚Äôappliquant ind√©pendamment du contexte.",
            "L‚Äôempirisme est une analyse bas√©e sur des observations et des preuves.",
            "Un mod√®le √©conomique peut aider √† √©valuer ou pr√©dire les impacts d‚Äôune politique publique ou d‚Äôun √©v√®nement pr√©cis.",
            "Un bon mod√®le n‚Äôest pas n√©cessairement r√©aliste."],
        "answer": 0,
        "explain": "Les mod√®les √©conomiques sont des simplifications conditionnelles : leurs r√©sultats d√©pendent d‚Äôhypoth√®ses et du contexte."
    },
    {
        "q": (
            "On observe qu‚Äôen moyenne les r√©sultats scolaires sont meilleurs dans les petites classes "
            "g√©r√©es par des enseignantes mieux pay√©es que la moyenne.\n"
            "Que pouvez-vous affirmer ?"),
        "choices": [
            "Il existe une corr√©lation n√©gative entre la r√©mun√©ration des enseignantes et les r√©sultats des √©l√®ves.",
            "Les salaires des enseignantes et la petite taille des classes am√©liorent directement la performance des √©l√®ves.",
            "Les meilleures enseignantes, qui sont aussi les mieux pay√©es, pr√©f√®rent travailler dans des petites classes.",
            "Il existe une corr√©lation n√©gative entre la taille des classes et les r√©sultats des √©l√®ves."],
        "answer": 3,
        "explain": (
            "L‚Äô√©nonc√© d√©crit une co-variation (petites classes ‚Üî meilleurs r√©sultats). "
            "On peut donc affirmer une corr√©lation n√©gative entre la taille des classes et les r√©sultats."
        ),
    },
    {
        "q": (
            "Il existe une forte corr√©lation entre la probabilit√© d‚Äôobserver une guerre civile dans un pays "
            "et le taux de croissance du PIB de ce pays.\n"
            "Comment peut-on s‚Äôassurer qu‚Äôen plus de cette corr√©lation, il existe en fait une relation de causalit√© ?"),
        "choices": [
            "Il faut s‚Äôassurer que la corr√©lation soit au moins de 0.9",
            "Il faut d‚Äôabord s‚Äôassurer qu‚Äôil n‚Äôexiste pas d‚Äôautre facteur pouvant expliquer √† la fois la guerre civile et le taux de croissance √©conomique du pays.",
            "Il faut d‚Äôabord s‚Äôassurer que le PIB du pays soit une variable explicative dans le mod√®le statistique",
            "Il faut s‚Äôassurer que la corr√©lation soit positive"],
        "answer": 1,
        "explain": (
            "La corr√©lation ne suffit pas √† √©tablir la causalit√©. Il faut v√©rifier qu‚Äôaucun facteur confondant "
            "n‚Äôexplique simultan√©ment la guerre civile et la croissance."
        ),
    },
]

# ------------- SIDEBAR ------------- #
with st.sidebar:
    st.header("‚öôÔ∏è Param√®tres")
    user_name = st.text_input("Votre nom (optionnel)", "")
    shuffle_q = st.checkbox("M√©langer les questions (au d√©marrage)", value=True)
    show_explain = st.checkbox("Afficher l'explication apr√®s validation", value=True)
    st.caption("Partagez simplement l‚ÄôURL publique de cette page.")

TARGET_MASTERY = 1  # 1 r√©ussite par question

# ------------- INIT / RESET ------------- #
def full_init():
    st.session_state.init = True
    st.session_state.n_questions = len(QUESTIONS)
    st.session_state.order = list(range(len(QUESTIONS)))
    if shuffle_q:
        random.shuffle(st.session_state.order)
    st.session_state.mastery = {i: 0 for i in range(len(QUESTIONS))}
    st.session_state.current = st.session_state.order[0]
    st.session_state.answers = {}
    st.session_state.just_validated = False
    st.session_state.last_result = None

def reset_all():
    full_init()

if ("init" not in st.session_state) or (st.session_state.get("n_questions") != len(QUESTIONS)):
    full_init()

# ------------- HEADER ------------- #
st.title("üéàR√©vision examen : Micro√©conomie I")
st.caption("Mode **apprentissage** : r√©p√©ter les erreurs jusqu‚Äô√† ma√Ætriser le sujet.")

# ------------- HELPERS ------------- #
def _choose_next(exclude_idx=None):
    remaining = [i for i in st.session_state.order
                 if st.session_state.mastery[i] < TARGET_MASTERY]
    if not remaining:
        return None
    remaining.sort(key=lambda i: st.session_state.mastery[i])
    min_level = st.session_state.mastery[remaining[0]]
    candidates = [i for i in remaining if st.session_state.mastery[i] == min_level]
    if exclude_idx in candidates and len(candidates) > 1:
        candidates = [i for i in candidates if i != exclude_idx]
    return random.choice(candidates)

def _advance_to_next():
    next_idx = _choose_next(exclude_idx=st.session_state.current)
    if next_idx is None:
        st.balloons()  # üéà effet fin de quiz
        st.toast("üëè Bravo ! C'est Ma√Ætris√©", icon="üéâ")
        stamped = datetime.now().strftime("%Y-%m-%d %H:%M")
        name_line = f" par {user_name}" if user_name.strip() else ""
        total_success = sum(st.session_state.mastery.values())
        st.success(
            f"üéâ Ma√Ætrise atteinte{name_line} ‚Äî toutes les questions r√©ussies "
            f"{TARGET_MASTERY} fois. ({total_success} r√©ussites compt√©es) ‚Äî {stamped}"
        )
        if st.button("üîÅ Recommencer"):
            reset_all()
            st.rerun()
        return
    st.session_state.current = next_idx
    st.session_state.just_validated = False
    st.session_state.last_result = None
    st.rerun()

def render_single(q_index):
    """Affiche une question. Retourne True/False si 'Valider' vient d'√™tre cliqu√©, sinon None."""
    q = QUESTIONS[q_index]

    # Titre + lignes suivantes
    lines = [s for s in q["q"].split("\n") if s.strip()]
    if len(lines) >= 1:
        st.subheader(lines[0])
    for i in range(1, len(lines)):
        s = lines[i]
        if any(token in s for token in ("=", "^", "\\frac", "\\cdot", "\\times")):
            try:
                st.latex(s)
            except Exception:
                st.markdown(s)
        else:
            st.markdown(s)

    # Choix (pas d'index forc√© pour √©viter le double-clic)
    key_radio = f"choice_{q_index}"
    if key_radio not in st.session_state:
        st.session_state[key_radio] = st.session_state.answers.get(q_index, 0)

    selected = st.radio(
        "Choisissez une r√©ponse :",
        options=list(range(4)),
        format_func=lambda i: q["choices"][i],
        key=key_radio,
    )
    st.session_state.answers[q_index] = selected

    # Valider
    validate = st.button("‚úÖ Valider", key=f"validate_{q_index}")
    if validate:
        correct = (selected == q["answer"])
        st.session_state.just_validated = True
        st.session_state.last_result = correct

        # Progression : on augmente imm√©diatement si c'est correct
        if correct and st.session_state.mastery[q_index] < TARGET_MASTERY:
            st.session_state.mastery[q_index] += 1

        if correct:
            st.success("‚úîÔ∏è Bonne r√©ponse !")
        else:
            st.error(f"‚ùå Mauvaise r√©ponse. R√©ponse attendue : {q['choices'][q['answer']]}")
        if show_explain and q.get("explain"):
            st.info(f" Explication : {q['explain']}")
        return correct

    # R√©affichage apr√®s validation (si on revient sur la m√™me question)
    if st.session_state.just_validated:
        correct = st.session_state.last_result
        if correct:
            st.success("‚úîÔ∏è Bonne r√©ponse !")
        else:
            st.error(f"‚ùå Mauvaise r√©ponse. R√©ponse attendue : {q['choices'][q['answer']]}")
        if show_explain and q.get("explain"):
            st.info(f" Explication : {q['explain']}")

    return None

# ------------- MODE APPRENTISSAGE (unique) ------------- #

# Placeholders pour garder la barre au-dessus
progress_bar_slot = st.empty()
progress_text_slot = st.empty()

# Affiche la question (met √† jour mastery si on a valid√© correctement)
q_idx = st.session_state.current
_ = render_single(q_idx)

# Calcule et affiche la progression (barre bleue par d√©faut)
mastered_count = sum(1 for v in st.session_state.mastery.values()
                     if v >= TARGET_MASTERY)
progress_bar_slot.progress(mastered_count / len(QUESTIONS))
progress_text_slot.write(
    f"Ma√Ætrise : **{mastered_count}/{len(QUESTIONS)}** questions "
)

# Apr√®s validation : bouton pour passer √† la suite (plus d'incr√©ment ici)
if st.session_state.just_validated:
    if st.button("‚û°Ô∏è Continuer", key=f"next_{q_idx}"):
        _advance_to_next()
